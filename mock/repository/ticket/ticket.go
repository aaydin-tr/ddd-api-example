// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aaydin-tr/gowit-case/domain/ticket/repository (interfaces: TicketRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../../mock/repository/ticket/ticket.go -package=repository github.com/aaydin-tr/gowit-case/domain/ticket/repository TicketRepository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	ticket "github.com/aaydin-tr/gowit-case/domain/ticket"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockTicketRepository is a mock of TicketRepository interface.
type MockTicketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTicketRepositoryMockRecorder
	isgomock struct{}
}

// MockTicketRepositoryMockRecorder is the mock recorder for MockTicketRepository.
type MockTicketRepositoryMockRecorder struct {
	mock *MockTicketRepository
}

// NewMockTicketRepository creates a new mock instance.
func NewMockTicketRepository(ctrl *gomock.Controller) *MockTicketRepository {
	mock := &MockTicketRepository{ctrl: ctrl}
	mock.recorder = &MockTicketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketRepository) EXPECT() *MockTicketRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTicketRepository) Create(ctx context.Context, t *ticket.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTicketRepositoryMockRecorder) Create(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTicketRepository)(nil).Create), ctx, t)
}

// FindByID mocks base method.
func (m *MockTicketRepository) FindByID(ctx context.Context, id int) (*ticket.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*ticket.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTicketRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTicketRepository)(nil).FindByID), ctx, id)
}

// FindByIDForUpdate mocks base method.
func (m *MockTicketRepository) FindByIDForUpdate(ctx context.Context, id int, tx *gorm.DB) (*ticket.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDForUpdate", ctx, id, tx)
	ret0, _ := ret[0].(*ticket.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDForUpdate indicates an expected call of FindByIDForUpdate.
func (mr *MockTicketRepositoryMockRecorder) FindByIDForUpdate(ctx, id, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDForUpdate", reflect.TypeOf((*MockTicketRepository)(nil).FindByIDForUpdate), ctx, id, tx)
}

// GetDB mocks base method.
func (m *MockTicketRepository) GetDB(ctx context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockTicketRepositoryMockRecorder) GetDB(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockTicketRepository)(nil).GetDB), ctx)
}

// Update mocks base method.
func (m *MockTicketRepository) Update(ctx context.Context, ticket *ticket.Ticket, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ticket, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTicketRepositoryMockRecorder) Update(ctx, ticket, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTicketRepository)(nil).Update), ctx, ticket, tx)
}
