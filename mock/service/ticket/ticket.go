// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aaydin-tr/ddd-api-example/service/ticket (interfaces: TicketService)
//
// Generated by this command:
//
//	mockgen -destination=../../mock/service/ticket/ticket.go -package=service github.com/aaydin-tr/ddd-api-example/service/ticket TicketService
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	ticket "github.com/aaydin-tr/ddd-api-example/domain/ticket"
	request "github.com/aaydin-tr/ddd-api-example/interface/http/request"
	gomock "go.uber.org/mock/gomock"
)

// MockTicketService is a mock of TicketService interface.
type MockTicketService struct {
	ctrl     *gomock.Controller
	recorder *MockTicketServiceMockRecorder
	isgomock struct{}
}

// MockTicketServiceMockRecorder is the mock recorder for MockTicketService.
type MockTicketServiceMockRecorder struct {
	mock *MockTicketService
}

// NewMockTicketService creates a new mock instance.
func NewMockTicketService(ctrl *gomock.Controller) *MockTicketService {
	mock := &MockTicketService{ctrl: ctrl}
	mock.recorder = &MockTicketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketService) EXPECT() *MockTicketServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTicketService) Create(ctx context.Context, req request.CreateTicketRequest) (*ticket.TicketDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*ticket.TicketDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTicketServiceMockRecorder) Create(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTicketService)(nil).Create), ctx, req)
}

// DecrementAllocation mocks base method.
func (m *MockTicketService) DecrementAllocation(ctx context.Context, ticketID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementAllocation", ctx, ticketID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementAllocation indicates an expected call of DecrementAllocation.
func (mr *MockTicketServiceMockRecorder) DecrementAllocation(ctx, ticketID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementAllocation", reflect.TypeOf((*MockTicketService)(nil).DecrementAllocation), ctx, ticketID, amount)
}

// FindByID mocks base method.
func (m *MockTicketService) FindByID(ctx context.Context, id int) (*ticket.TicketDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*ticket.TicketDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTicketServiceMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTicketService)(nil).FindByID), ctx, id)
}
